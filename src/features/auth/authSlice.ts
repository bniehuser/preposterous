import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { Auth_LoginAndPassword, OpenAPI } from '../../services/openapi';
import { AuthService } from '../../services/openapi';

export interface AuthState {
  username?: string;
  password?: string;
  token?: string;
  expires?: number;
  isAdministrator: boolean;
  loading: boolean;
}

const initialState: AuthState = {
  username: undefined,
  password: undefined,
  token: undefined,
  expires: undefined,
  isAdministrator: false,
  loading: false,
};

export const authorize = createAsyncThunk(
  'auth/authorize',
  async (loginAndPass: Auth_LoginAndPassword) => await AuthService.postAuthService(loginAndPass),
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: state => {
      state.token = undefined;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(authorize.pending, (state) => {
        state.loading = true;
      })
      .addCase(authorize.fulfilled, (state, action) => {
        console.log('we are authorizing HOW MANY TIMES?');
        state.username = action.meta.arg.UserName;
        state.token = action.payload.AuthToken;
        state.isAdministrator = action.payload.IsAdministrator || false;
        state.expires = action.payload.Expiry ? new Date(action.payload.Expiry).getTime() : undefined;
        state.loading = false;
      });
  },
});

export const { logout } = authSlice.actions;

export const selectToken = (state: RootState) => state.auth.token;


export default authSlice.reducer;
