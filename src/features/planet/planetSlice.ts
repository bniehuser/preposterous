import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { Planet_ListItem, PlanetService } from '../../services/openapi';

export interface PlanetState {
  byId: { [id: string]: Planet_ListItem };
  loading: boolean;
}

const initialState: PlanetState = {
  byId: {},
  loading: false,
};

export const fetchPlanets = createAsyncThunk(
  'planet/fetch',
  async () => await PlanetService.postPlanetService3({}),
);

export const planetSlice = createSlice({
  name: 'planet',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPlanets.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchPlanets.fulfilled, (state, action) => {
        state.byId = action.payload.reduce((a: { [id: string]: Planet_ListItem }, c: Planet_ListItem) => { a[c.PlanetNaturalId as string] = c; return a; }, {});
        state.loading = false;
      });
  },
});

export const { } = planetSlice.actions;

export default planetSlice.reducer;
