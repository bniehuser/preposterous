import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { BuildingService, PlanetService, RecipesService } from '../../services/openapi';

export interface GameDataState {
  planets: {
    byId: { [id: string]: any }
  };
  recipes: {
    byId: { [id: string]: any }
  }
  buildings: {
    byId: { [id: string]: any }
  }
  loading: boolean;
  loadingMessage: string;
  loadingPercent: number;
}

const initialState: GameDataState = {
  planets: { byId: {}},
  recipes: { byId: {}},
  buildings: { byId: {}},
  loading: false,
  loadingMessage: '',
  loadingPercent: 0,
};

export const fetchGameData = createAsyncThunk(
  'gameData/fetch',
  async (_, { getState, dispatch }) => {
    const services: Array<[()=>Promise<any>, string]> = [];
    const state = (getState() as RootState);
    console.log(state)
    if(!Object.keys(state.gameData.planets.byId).length) {
      services.push([PlanetService.getPlanetService1, 'Planet Data']);
    }
    if(!Object.keys(state.gameData.recipes.byId).length) {
      services.push([RecipesService.getRecipesService1, 'Recipe Data']);
    }
    if(!Object.keys(state.gameData.buildings.byId).length) {
      services.push([BuildingService.getBuildingService, 'Buildings']);
    }
    console.log('going to run promise...');
    return await Promise.all(services.map(([s, n]) => s().then(r => {
      console.log('should have finished promise', n);
      dispatch(addLoadProgress({percent: 100/services.length, message: `${n} Loaded`}));
      return r;
    })));
  },
);

export const gameDataSlice = createSlice({
  name: 'gameData',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addLoadProgress: (state, action: PayloadAction<{percent: number, message: string}>) => {
      state.loadingMessage = action.payload.message;
      state.loadingPercent += action.payload.percent;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchGameData.pending, (state) => {
        state.loading = true;
        state.loadingMessage = 'Starting Loading';
        state.loadingPercent = 0;
      })
      .addCase(fetchGameData.rejected, (state, action) => {
        console.log(action);
        state.loading = false;
        state.loadingMessage = `ERROR: ${action.payload}`;
        state.loadingPercent = 100;
      })
      .addCase(fetchGameData.fulfilled, (state, action) => {
        const [planets, recipes, buildings,] = action.payload;
        state.planets.byId = planets.reduce((a: {[k: string]: any}, c: any) => {
          a[c.PlanetNaturalId] = c;
          return a;
        }, {})
        state.recipes.byId = recipes.reduce((a: {[k: string]: any}, c: any) => {
          a[c.RecipeName] = c;
          return a;
        }, {})
        state.buildings.byId = buildings.reduce((a: {[k: string]: any}, c: any) => {
          a[c.BuildingId] = c;
          return a;
        }, {})
        state.loading = false;
        state.loadingMessage = 'Finished Loading';
        state.loadingPercent = 100;
      });
  },
});

export const { addLoadProgress } = gameDataSlice.actions;

export const selectHasGameData = (state: RootState) => {
  if (
    Object.keys(state.gameData.planets).length
    && Object.keys(state.gameData.recipes).length
    && Object.keys(state.gameData.buildings).length
  ) { return true; }
  return false;
}

export default gameDataSlice.reducer;
