import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { Planet_ListItem, PlanetService } from '../../services/openapi';

export interface GameDataState {
  planets: {
    byId: { [id: string]: Planet_ListItem }
  };
  recipes: {
    byId: { [id: string]: any }
  }
  loading: boolean;
  loadingMessage: string;
  loadingPercent: number;
}

const initialState: GameDataState = {
  planets: { byId: {}},
  recipes: { byId: {}},
  loading: false,
  loadingMessage: '',
  loadingPercent: 0,
};

export const fetchGameData = createAsyncThunk(
  'gameData/fetch',
  async () => await Promise.all([
    PlanetService.postPlanetService3({}),
  ]),
);

export const gameDataSlice = createSlice({
  name: 'gameData',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchGameData.pending, (state) => {
        state.loading = true;
        state.loadingMessage = 'Starting Loading';
        state.loadingPercent = 0;
      })
      .addCase(fetchGameData.fulfilled, (state, action) => {
        const [planets,] = action.payload;
        console.log(planets);
        state.loading = false;
        state.loadingMessage = 'Finished Loading';
        state.loadingPercent = 100;
      });
  },
});

export const { } = gameDataSlice.actions;


export default gameDataSlice.reducer;
